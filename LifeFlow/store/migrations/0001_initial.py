# Generated by Django 4.2.25 on 2025-10-10 11:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import store.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "order_number",
                    models.CharField(editable=False, max_length=20, unique=True),
                ),
                (
                    "complete",
                    models.BooleanField(
                        default=False,
                        help_text="Incomplete orders are still in the customers cart.",
                    ),
                ),
                (
                    "stripe_checkout_session_id",
                    models.CharField(
                        blank=True,
                        help_text="Auto-filled by stripe",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "stripe_payment_intent_id",
                    models.CharField(
                        blank=True,
                        help_text="Auto-filled by stripe",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "stripe_charge_id",
                    models.CharField(
                        blank=True,
                        help_text="Auto-filled by stripe",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "receipt_url",
                    models.URLField(
                        blank=True, help_text="Digital receipt URL", null=True
                    ),
                ),
                (
                    "stripe_refund_id",
                    models.CharField(
                        blank=True,
                        help_text="Auto-filled by stripe",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "refunded_amount",
                    models.PositiveIntegerField(
                        default=0, help_text="Amount of cents refunded"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="store.customer"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Price",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "amount",
                    models.PositiveIntegerField(help_text="Numerical value in Dollars"),
                ),
                ("is_subscription", models.BooleanField(default=False)),
                (
                    "billing_interval",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("month", "Monthly"),
                            ("year", "Yearly"),
                            ("6_months", "6 Months"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Active prices the prices listed to public",
                    ),
                ),
                (
                    "stripe_price_id",
                    models.CharField(
                        blank=True,
                        help_text="Auto-filled by stripe",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["product", "-active", "amount"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.CharField(
                        help_text="Unique code like 'tenement_management_system'",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="ID must contain lowercase and underscores only.",
                                regex="[a-z0-9_]+",
                            )
                        ],
                    ),
                ),
                (
                    "stripe_product_id",
                    models.CharField(
                        blank=True,
                        help_text="Auto-filled by stripe.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name like 'Tenement Management System'",
                        max_length=200,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Short description for product",
                        max_length=200,
                    ),
                ),
                (
                    "long_description",
                    models.CharField(blank=True, default="", max_length=5000),
                ),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=store.models.get_product_thumbnail,
                    ),
                ),
                (
                    "icon",
                    models.ImageField(
                        blank=True, null=True, upload_to=store.models.get_product_icon
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="Destination URL for the product after purchase (e.g. https://app.example.com/dashboard)",
                        null=True,
                    ),
                ),
                (
                    "single_purchase_only",
                    models.BooleanField(
                        default=False,
                        help_text="If enabled, users can only buy this product once.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProductTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Designates the name of the tag.", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("canceled", "Canceled"),
                            ("incomplete", "Incomplete"),
                            ("incomplete_expired", "Incomplete Expired"),
                            ("past_due", "Past Due"),
                            ("trialing", "Trialing"),
                            ("paid", "Paid"),
                            ("unpaid", "Unpaid"),
                        ],
                        max_length=30,
                    ),
                ),
                ("current_period_start", models.DateTimeField()),
                ("current_period_end", models.DateTimeField()),
                (
                    "stripe_subscription_id",
                    models.CharField(
                        blank=True,
                        help_text="Auto-filled by stripe",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                ("attempt_count", models.IntegerField(default=0)),
                (
                    "next_payment_attempt",
                    models.DateTimeField(
                        blank=True,
                        help_text="Auto-filled by stripe if payment failed.",
                        null=True,
                    ),
                ),
                (
                    "latest_stripe_invoice_id",
                    models.CharField(
                        blank=True,
                        help_text="Auto-filled by stripe",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "cancel_at_period_end",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to renew subscription at end of period",
                    ),
                ),
                ("cancel_at", models.DateTimeField(blank=True, null=True)),
                ("canceled_at", models.DateTimeField(blank=True, null=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="store.customer",
                    ),
                ),
                (
                    "price",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="store.price"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="store.product"
                    ),
                ),
            ],
            options={
                "ordering": ["-current_period_end"],
            },
        ),
        migrations.AddField(
            model_name="product",
            name="tags",
            field=models.ManyToManyField(blank=True, to="store.producttag"),
        ),
        migrations.AddField(
            model_name="price",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="prices",
                to="store.product",
            ),
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=0)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                ("refunded", models.BooleanField(default=False)),
                ("refunded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="store.order",
                    ),
                ),
                (
                    "price",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="store.price"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="store.product"
                    ),
                ),
            ],
            options={
                "ordering": ["order", "added_at"],
            },
        ),
    ]
